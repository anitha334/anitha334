#include <iostream>
#include <vector>
#include <numeric>
#include <cmath>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

// Function to calculate the constant term
double calculate_constant_term(const std::vector<double>& roots, double a_m = 1.0) {
    double product = std::accumulate(roots.begin(), roots.end(), 1.0, std::multiplies<double>());
    return a_m * std::pow(-1, roots.size()) * product;
}

int main() {
    // Sample JSON input
    std::string json_input = R"({
        "roots": [1, 2, 3],
        "a_m": 1
    })";

    // Parse JSON input
    json data = json::parse(json_input);
    std::vector<double> roots = data["roots"].get<std::vector<double>>();
    double a_m = data.contains("a_m") ? data["a_m"].get<double>() : 1.0;

    // Calculate the constant term
    double constant_term = calculate_constant_term(roots, a_m);
    
    // Output the result
    std::cout << "Constant term (c): " << constant_term << std::endl;

    return 0;
}
